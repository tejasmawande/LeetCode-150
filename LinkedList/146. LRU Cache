class LRUCache {

class Node{
    int key;
    int value;
    Node next;
    Node prev;
    Node(int key, int value){
        this.key = key; 
        this.value = value;
    }

}
    private final int capacity;
    private final HashMap<Integer, Node> cache;
    private final Node head;
    private final Node tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.cache = new HashMap<>();
        this.head  = new Node(0,0);
        this.tail = new Node(0,0);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(cache.containsKey(key)){
            Node node = cache.get(key);
            remove(node);
            addToFront(node);

            return node.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        
        if(cache.containsKey(key)){
            Node node = cache.get(key);
            node.value = value;
            remove(node);
            addToFront(node);

        }else{
            if(cache.size() == capacity){
                Node leastRecentlyUsed = tail.prev;
                remove(leastRecentlyUsed);
                cache.remove(leastRecentlyUsed.key);
            }
            Node new_node = new Node(key, value);
            cache.put(key,new_node);
            addToFront(new_node);

        }
    }

    public void remove(Node node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    public void addToFront(Node node){
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
