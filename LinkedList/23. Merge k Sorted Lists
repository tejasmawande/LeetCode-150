/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length ==0 ){
            return null;
        }
        return  mergeTemp(lists, 0, lists.length -1);
    }
    public ListNode mergeTemp(ListNode[] lists, int start, int end){
        if(start == end){
            return lists[start];
        }
        if(start+1 == end){
            return merge(lists[start], lists[end]);
        }

        int mid = start + (end - start)/2;
        ListNode left = mergeTemp(lists, start, mid);
        ListNode right = mergeTemp(lists, mid+1, end);

        return merge(left, right);
    }

    public ListNode merge(ListNode list1, ListNode list2){
        ListNode tailNode = new ListNode();
        ListNode currentNode = tailNode;

        while(true){
            if(list1 == null){
                tailNode.next = list2;
                break;
            }
            if(list2 == null){
                tailNode.next = list1;
                break;
            }
            if(list1.val < list2.val){
                tailNode.next = list1;
                list1 = list1.next;
            }else{
                tailNode.next = list2;
                list2 = list2.next;
            }
            tailNode = tailNode.next;
        }
        return currentNode.next;
    }
}
