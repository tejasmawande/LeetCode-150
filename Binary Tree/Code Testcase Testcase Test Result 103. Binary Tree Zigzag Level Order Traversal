/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> resultList = new ArrayList<>();  
        breadthFirstSearch(root,resultList);
        return resultList;
    }

    public void breadthFirstSearch(TreeNode root, List<List<Integer>> resultList){
                if(root == null) return;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            int level = queue.size();
            List<Integer> result = new ArrayList<>();

            for(int i = 0 ; i < level; i++){
                TreeNode node = queue.poll();

                    result.add(node.val);
                       
                            if(node.left != null){
                             queue.add(node.left);
                            }
                          if(node.right != null){
                             queue.add(node.right);
                            }
        
                }
                
                resultList.add(result);
            }
            for(int i = 0; i < resultList.size(); i++){
                if(i %2 !=0){
                    Collections.reverse(resultList.get(i));
                }
            }
        }

    }
